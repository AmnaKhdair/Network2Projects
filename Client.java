/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package network2;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.stage.FileChooser;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

/**
 *
 * @author smilecom
 */
public class Client extends javax.swing.JFrame {

    /**
     * Creates new form uploaddownload
     */
    public Client() {
        initComponents();
    }
String Data="";
String contentStr = "application/x-www-form-urlencoded";
String filePath="";
 int count=1;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        URLcombobox = new javax.swing.JComboBox<>();
        selectButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        URLchoosen = new javax.swing.JTextField();
        imageName = new javax.swing.JTextField();
        UploadImage = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        DesImage = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        imagesNameComboBox = new javax.swing.JComboBox<>();
        showImages = new javax.swing.JButton();
        deleteImage = new javax.swing.JButton();
        updatedes = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        desImage = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        downloadImage = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 15), new java.awt.Dimension(0, 15), new java.awt.Dimension(32767, 15));
        jLabel7 = new javax.swing.JLabel();
        imageLabel = new javax.swing.JLabel();
        updateImage = new javax.swing.JButton();
        downloadImageBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("URL:");

        URLcombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "http://localhost/oursite/phpServer.php" }));
        URLcombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                URLcomboboxActionPerformed(evt);
            }
        });

        selectButton.setText("Select");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("choosen URL");

        UploadImage.setText("Upload");
        UploadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UploadImageActionPerformed(evt);
            }
        });

        jLabel5.setText("images");

        DesImage.setColumns(20);
        DesImage.setRows(5);
        jScrollPane1.setViewportView(DesImage);

        jLabel6.setText("Description");

        showImages.setText("Show all Images");
        showImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showImagesActionPerformed(evt);
            }
        });

        deleteImage.setText("Delete");
        deleteImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteImageActionPerformed(evt);
            }
        });

        updatedes.setText("Update Description");
        updatedes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatedesActionPerformed(evt);
            }
        });

        desImage.setColumns(20);
        desImage.setRows(5);
        jScrollPane2.setViewportView(desImage);

        jLabel3.setText("Description");

        downloadImage.setText("DownLoad");
        downloadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadImageActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(204, 0, 0));
        jLabel7.setText("Image");

        updateImage.setText("Update Image");
        updateImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateImageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel1)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(downloadImageBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(URLchoosen)
                    .addComponent(imageName)
                    .addComponent(jScrollPane1)
                    .addComponent(URLcombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(showImages)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(imagesNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updatedes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(downloadImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(UploadImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(286, 286, 286)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(URLcombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectButton)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(URLchoosen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(imageName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(UploadImage)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(downloadImageBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(downloadImage))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(1, 1, 1)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(imagesNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(showImages)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(34, 34, 34)
                                            .addComponent(deleteImage)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(updatedes)
                                    .addGap(8, 8, 8)
                                    .addComponent(updateImage))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(66, 66, 66)
                                    .addComponent(jLabel3))))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
            .addComponent(filler1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        // TODO add your handling code here:
        String url=(String) URLcombobox.getSelectedItem();
        URLchoosen.setText(url);
        
        
    }//GEN-LAST:event_selectButtonActionPerformed

    private void URLcomboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_URLcomboboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_URLcomboboxActionPerformed

    private void showImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showImagesActionPerformed
        // TODO add your handling code here:
       imagesNameComboBox.removeAllItems();
           URL url;
           Data="";
           try {
            url = new URL(URLchoosen.getText());
            HttpURLConnection httpConnection =(HttpURLConnection) url.openConnection(); 
            httpConnection.setRequestMethod("POST");
            httpConnection.setRequestProperty ("Content-Type", contentStr); 
            httpConnection.setDoInput(true);
            httpConnection.setUseCaches(false);
            httpConnection.setDoOutput(true); 
            addParameter("requestImage","showImage");
            BufferedOutputStream out =new BufferedOutputStream(httpConnection.getOutputStream());
            out.write(Data.getBytes());
            out.close();
             
             //to print from server...
             if (httpConnection .getResponseCode()== HttpURLConnection.HTTP_OK) {
             int b = -1;
             String SS="";
             try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()))) {
             while ((b = bufferedReader.read()) != -1)  SS = SS + (char) b;
             System.out.print(SS);
             String []imagesName=SS.split("-");
             int i=0;
             
             while(i<imagesName.length)
             {
                 imagesNameComboBox.addItem(imagesName[i]);
                 i++;
              }
              
               }   catch (Exception ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
             }
        } catch (Exception ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
           
        
    }//GEN-LAST:event_showImagesActionPerformed
     
    public void addParameter(String name, String value){
        if(name == null || value == null || name.length()==0 || value.length()==0||( name.equals("imageDes")&&value.length()==500) )return;
        if(Data.length()>0) Data+="&";
        try{
        Data += name+ "=" +URLEncoder.encode(value,"ASCII");
        }catch (Exception e){
              System.out.println(e.toString()); 
        }
    }
    
    private void UploadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UploadImageActionPerformed
        // TODO add your handling code here:
        Data="";
        if(count<=12)
        {   count++;
             JFileChooser chooser=new JFileChooser();
             chooser.showOpenDialog(this);
             File file= chooser.getSelectedFile();
             filePath=file.getAbsolutePath();
             System.out.print(filePath);
             imageName.setText(file.getName());
             String des=DesImage.getText();
        try {
             FileInputStream  fileInput = new FileInputStream(new File(filePath));
              addParameter("uploadImage","true");
             addParameter("imageName",file.getName());
             addParameter("imageDes",des);
              
             URL url=new URL(URLchoosen.getText());
             HttpURLConnection httpConnection =(HttpURLConnection) url.openConnection(); 
             httpConnection.setRequestMethod("POST");
             httpConnection.setRequestProperty ("Content-Type", contentStr);
             httpConnection.setDoInput(true);
             httpConnection.setUseCaches(false);
             httpConnection.setDoOutput(true); 
            
             BufferedImage img=ImageIO.read(new File(filePath));
             ByteArrayOutputStream byteStream=new  ByteArrayOutputStream();
             String []fileExtend=file.getName().split("\\.");
             ImageIO.write(img, fileExtend[1], byteStream);
             byte[] image= byteStream.toByteArray();
             String imageSend=Base64.getEncoder().encodeToString(image);
             addParameter("imageSend",imageSend);     
             BufferedOutputStream out =new BufferedOutputStream(httpConnection.getOutputStream());
             out.write(Data.getBytes());
             out.close();
         
             //set the image on label after we scale it, if the hight or width large the size of label then change it accoeding to label...
             if (httpConnection .getResponseCode()== HttpURLConnection.HTTP_OK) {
             int b = -1; String SS="";
             try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()))) {
             while ((b = bufferedReader.read()) != -1)  SS = SS + (char) b;
              System.out.print(SS);
               }   
               
             BufferedImage img1=ImageIO.read(new File(filePath));
             ImageIcon icon=new ImageIcon(img1);
             int height=0;
             int width=0;
             if(icon.getIconHeight()>429) height =429;
             else height=icon.getIconHeight();
             if(icon.getIconWidth()>605)  width =605;
             else width=icon.getIconWidth();
             icon =new ImageIcon(icon.getImage().getScaledInstance(width, height, Image.SCALE_DEFAULT));        
              //set icon..
             if(SS.equals("sucess"))  imageLabel.setIcon(icon); 
             } 
             else System.out.println("Erorr...NotFound");
         
        } catch (Exception ex) { Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
         DesImage.removeAll();
         downloadImageBox.addItem(file.getName());
            
        }
    }//GEN-LAST:event_UploadImageActionPerformed

    private void updatedesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatedesActionPerformed
        // TODO add your handling code here:
        Data="";
        URL url;
        try {
          url = new URL(URLchoosen.getText());
          HttpURLConnection httpConnection =(HttpURLConnection) url.openConnection(); 
          httpConnection.setRequestMethod("POST");
          httpConnection.setRequestProperty ("Content-Type", contentStr); 
          httpConnection.setDoInput(true);
          httpConnection.setUseCaches(false);
          httpConnection.setDoOutput(true); 
            
          String selectImage= (String) imagesNameComboBox.getSelectedItem();
          addParameter("updateDe","true");
          addParameter("imageName",selectImage);
          addParameter("imageDes",desImage.getText());
          BufferedOutputStream out1 =new BufferedOutputStream(httpConnection.getOutputStream());
         
          out1.write(Data.getBytes());
          out1.close();
          if (httpConnection .getResponseCode()== HttpURLConnection.HTTP_OK) {
          int b = -1;
          String SS="";
          try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()))) {
          while ((b = bufferedReader.read()) != -1)  SS = SS + (char) b;
         // System.out.print(SS);
          }   catch (Exception ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
          }
             }
          
        } catch (Exception ex) { Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        desImage.removeAll();
    }//GEN-LAST:event_updatedesActionPerformed

    private void deleteImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteImageActionPerformed
        // TODO add your handling code here:
        Data="";
         URL url;
        try {
           
          url = new URL(URLchoosen.getText());
          HttpURLConnection httpConnection =(HttpURLConnection) url.openConnection(); 
          httpConnection.setRequestMethod("POST");
          httpConnection.setRequestProperty ("Content-Type", contentStr); 
          httpConnection.setDoInput(true);
          httpConnection.setUseCaches(false);
          httpConnection.setDoOutput(true); 
            
         // String selectImage= (String) imagesNameComboBox.getSelectedItem();
          addParameter("deleteImage","true");
          String s=(String) imagesNameComboBox.getSelectedItem();
          String[] tempS=s.split(" ");
          addParameter("imageName", tempS[1]);
          
        
          BufferedOutputStream out1 =new BufferedOutputStream(httpConnection.getOutputStream());
          out1.write(Data.getBytes());
          out1.close();
          if (httpConnection .getResponseCode()== HttpURLConnection.HTTP_OK) {
          int b = -1;
          String SS="";
          try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()))) {
          while ((b = bufferedReader.read()) != -1)  SS = SS + (char) b;
          if(SS.contains("successDelete")==true)
              imageLabel.setIcon(null);
           System.out.print("//"+SS);
          
          }   catch (Exception ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
         }
             }
          
        } catch (Exception ex) { Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        desImage.removeAll();
        downloadImageBox.removeItem(imagesNameComboBox.getSelectedItem());
    }//GEN-LAST:event_deleteImageActionPerformed

    private void updateImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateImageActionPerformed
        // TODO add your handling code here:
            Data="";
             JFileChooser chooser=new JFileChooser();
             chooser.showOpenDialog(this);
             File file= chooser.getSelectedFile();
             String fPath=file.getAbsolutePath();
             String imageName=file.getName();
             
             
             URL url;
        try {
             url = new URL(URLchoosen.getText());
             HttpURLConnection httpConnection =(HttpURLConnection) url.openConnection(); 
             httpConnection.setRequestMethod("POST");
             httpConnection.setRequestProperty ("Content-Type", contentStr);      
             httpConnection.setDoInput(true);
             httpConnection.setUseCaches(false);
             httpConnection.setDoOutput(true); 
             addParameter("updateImage","true");
             String s=(String) imagesNameComboBox.getSelectedItem();
             String[] tempS=s.split(" ");
             addParameter("imageName", tempS[1]);
             
             
             BufferedImage img=ImageIO.read(new File(fPath));
             ByteArrayOutputStream byteStream=new  ByteArrayOutputStream();
             String []fileExtend=file.getName().split("\\.");
             ImageIO.write(img, fileExtend[1], byteStream);
             byte[] image= byteStream.toByteArray();
             String imageSend=Base64.getEncoder().encodeToString(image);
             addParameter("imageSend",imageSend);     
             BufferedOutputStream out =new BufferedOutputStream(httpConnection.getOutputStream());
             out.write(Data.getBytes());
             out.close();
             
             
             
             if (httpConnection .getResponseCode()== HttpURLConnection.HTTP_OK) {
             int b = -1; String SS="";
             try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()))) {
             while ((b = bufferedReader.read()) != -1)  SS = SS + (char) b;
              System.out.print(SS);
               }   
               
             BufferedImage img1=ImageIO.read(new File(fPath));
             ImageIcon icon=new ImageIcon(img1);
             int height=0;
             int width=0;
             if(icon.getIconHeight()>429) height =429;
             else height=icon.getIconHeight();
             if(icon.getIconWidth()>605)  width =605;
             else width=icon.getIconWidth();
             icon =new ImageIcon(icon.getImage().getScaledInstance(width, height, Image.SCALE_DEFAULT));        
              //set icon..
             if(SS.contains("sucessUpdate"))  imageLabel.setIcon(icon); 
             } 
             else System.out.println("Erorr...NotFound");
         
        } catch (Exception ex) { Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
       desImage.removeAll();
             
        
    }//GEN-LAST:event_updateImageActionPerformed

    private void downloadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadImageActionPerformed
        Data="";
        try {
            imageLabel.setIcon(null);
            // TODO add your handling code here:
            URL url=new URL(URLchoosen.getText());
            HttpURLConnection httpConnection =(HttpURLConnection) url.openConnection();
            httpConnection.setRequestMethod("POST");
            httpConnection.setRequestProperty ("Content-Type", contentStr);
            httpConnection.setDoInput(true);
            httpConnection.setUseCaches(false);
            httpConnection.setDoOutput(true);
            Data=URLEncoder.encode("download_image", "UTF-8") + "=" + downloadImageBox.getSelectedItem();
            BufferedOutputStream out = new BufferedOutputStream(httpConnection.getOutputStream());
            addParameter("downloadImage","true");
           // addParameter("imageName", (String) downloadImageBox.getSelectedItem());
            out.write(Data.getBytes());
            out.close();

            byte tmp[]=new byte[1024];
            InputStream in=httpConnection.getInputStream();
            ByteArrayOutputStream OutByte=new ByteArrayOutputStream();
            int x=0;
            int b = -1;
             String SS="";
            FileOutputStream  myWriter = new FileOutputStream ("C:/Users/ThinkPad/Desktop/"+downloadImageBox.getSelectedItem());
            if (httpConnection.getResponseCode()== HttpURLConnection.HTTP_OK) {
                try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()))) {
                    while (-1!=(x=in.read(tmp))) {OutByte.write(tmp,0,x); }
                    //SS = SS + (char) b;}
                    byte []r=OutByte.toByteArray();
                    myWriter.write(r);
                    myWriter.close();
                     in.close();
                     //System.out.print(SS);
                   
                }
               
                File ff=new File("C:/Users/ThinkPad/Desktop/"+downloadImageBox.getSelectedItem());
                BufferedImage image=ImageIO.read(ff);
                ByteArrayOutputStream byteStream=new  ByteArrayOutputStream();
                ImageIO.write((BufferedImage)image,"png",byteStream);
                ImageIcon icon=new ImageIcon(image);
                int height=0;
                int width=0;
                if(icon.getIconHeight()>429) height =429;
                else height=icon.getIconHeight();
                if(icon.getIconWidth()>605)  width =605;
                else width=icon.getIconWidth();
                icon =new ImageIcon(icon.getImage().getScaledInstance(width, height, Image.SCALE_DEFAULT));
              imageLabel.setIcon(icon);

            }
        } catch (Exception ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_downloadImageActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea DesImage;
    private javax.swing.JTextField URLchoosen;
    private javax.swing.JComboBox<String> URLcombobox;
    private javax.swing.JButton UploadImage;
    private javax.swing.JButton deleteImage;
    private javax.swing.JTextArea desImage;
    private javax.swing.JButton downloadImage;
    private javax.swing.JComboBox<String> downloadImageBox;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JTextField imageName;
    private javax.swing.JComboBox<String> imagesNameComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton selectButton;
    private javax.swing.JButton showImages;
    private javax.swing.JButton updateImage;
    private javax.swing.JButton updatedes;
    // End of variables declaration//GEN-END:variables

 
}
